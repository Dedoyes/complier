//未优化终版
//3333 if else if  
//new
//github原版 
#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <stack>
#include <sstream>
#include <stdlib.h>

using namespace std;

struct token {
    string TokenA;
    int TokenB;
};

struct quaternion {
    string op;      // 操作符
    string opt1;    // 操作数1
    string opt2;    // 操作数2
    string result;  // 结果
};

vector<token> Token;        // 全局变量，用来存储分析好的token序列
vector<quaternion> Quaternion; // 全局变量，用来存储生成的四元式序列

map<string, int> K;  // 关键字
map<string, int> P;  // 界符
map<string, int> OP; // 操作符优先级

void iniK() {
    K["int"] = 1;
    K["float"] = 2;
    K["void"] = 3;
    K["double"] = 4;
    K["bool"] = 5;
    K["for"] = 6;
    K["while"] = 7;
    K["if"] = 8;
    K["else"] = 9;
    K["do"] = 10;
    K["break"] = 11;
    K["main"] = 12;
    K["return"] = 13;
    K["string"] = 14;
    K["char"] = 15;
    K["struct"] = 16;
    K["continue"] = 17;
}

void iniP() {
    P["+"] = 1;
    P["-"] = 2;
    P["*"] = 3;
    P["/"] = 4;
    P[","] = 5;
    P[":"] = 6;
    P[";"] = 7;
    P["("] = 8;
    P[")"] = 9;
    P["{"] = 10;
    P["}"] = 11;
    P["["] = 12;
    P["]"] = 13;
    P["+="] = 14;
    P["-="] = 15;
    P["++"] = 16;
    P["--"] = 17;
    P["!"] = 18;
    P["&"] = 19;
    P["&&"] = 20;
    P["||"] = 21;
    P["%"] = 22;
    P["~"] = 23;
    P["="] = 24;
    P["!="] = 25;
    P[">"] = 26;
    P["<"] = 27;
    P[">="] = 28;
    P["<="] = 29;
    P["|"] = 30;
    P["^"] = 31;
    P["'"] = 32;
    P["\""] = 33;
        P["=="] = 34;
}

void iniOP() {
    OP["+"] = 1;
    OP["-"] = 1;
    OP["*"] = 2;
    OP["/"] = 2;
    OP["+="] = 1;
    OP["-="] = 1;
    OP["*="] = 2;
    OP["/="] = 2;
    OP["("] = 0;
}

void addToken(const string& TokenA, int TokenB) {
    Token.push_back({TokenA, TokenB});
}

void addQuaternion(const string& op, const string& opt1, const string& opt2, const string& result) {
    Quaternion.push_back({op, opt1, opt2, result});
}

vector<string> infixToPostfix(const vector<token>& expr) {
    stack<string> opStack;
    vector<string> postfix;
    for (const auto& t : expr) {
        if (t.TokenB == 0) {
            postfix.push_back(t.TokenA);
        } else if (t.TokenA == "(") {
            opStack.push(t.TokenA);
        } else if (t.TokenA == ")") {
            while (!opStack.empty() && opStack.top() != "(") {
                postfix.push_back(opStack.top());
                opStack.pop();
            }
            opStack.pop(); // pop "("
        } else {
            while (!opStack.empty() && OP[opStack.top()] >= OP[t.TokenA]) {
                postfix.push_back(opStack.top());
                opStack.pop();
            }
            opStack.push(t.TokenA);
        }
    }
    while (!opStack.empty()) {
        postfix.push_back(opStack.top());
        opStack.pop();
    }
    return postfix;
}

string evaluatePostfix(vector<string>& postfix) {
    stack<string> evalStack;
    int tempCount = 1;
    for (const auto& token : postfix) {
        if (OP.find(token) == OP.end()) {
            evalStack.push(token);
        } else {
            if (token == "&&" || token == "||") {
                string op2 = evalStack.top(); evalStack.pop();
                string op1 = evalStack.top(); evalStack.pop();
                string tempVar = "t" + to_string(tempCount++);
                addQuaternion(token, op1, op2, tempVar);
                evalStack.push(tempVar);
            } else {
                string op2 = evalStack.top(); evalStack.pop();
                string op1 = evalStack.top(); evalStack.pop();
                string tempVar = "t" + to_string(tempCount++);
                addQuaternion(token, op1, op2, tempVar);
                evalStack.push(tempVar);
            }
        }
    }
    return evalStack.top();
}


void parseExpression(size_t& i, int& labelCount);
void parseExpression_for(size_t& i, int& labelCount);
void parseBlock(size_t& i, int& labelCount);
void parseVariableDeclaration(size_t& i, int& labelCount);
void parseIfStatement(size_t& i, int& labelCount);
void parseWhileStatement(size_t& i, int& labelCount);
void parseForStatement(size_t& i, int& labelCount);
void parseElseIfStatement(size_t& i, int& labelCount, string& endLabel);
void parseStructDefinition(size_t& i, int& labelCount);
void parseFunctionReturnStatement(size_t& i, int& labelCount);


void parseStructDefinition(size_t& i, int& labelCount) {
    string structName = Token[i].TokenA;
    i++; // 跳过结构体名
    if (Token[i].TokenA == "{") {
        addQuaternion("struct_begin", "_", "_", structName); // 添加struct_begin四元式
        i++; // 跳过"{"
        while (Token[i].TokenA != "}") {
            parseVariableDeclaration(i, labelCount); // 结构体成员可以是变量
        }
        i++; // 跳过"}"
        i++; // 跳过分号
        addQuaternion("struct_end", "_", "_", structName); // 添加struct_end四元式
    }
}


void parseFunctionReturnStatement(size_t& i, int& labelCount) {
    if (Token[i].TokenA == "return") {
        i++;
        vector<token> expr;
        while (Token[i].TokenA != ";") {
            expr.push_back(Token[i]);
            i++;
        }
        if (expr[1].TokenA == "(" && expr[0].TokenB == 0) {
            addQuaternion("return", expr[0].TokenA, "_", "function");
        } else {
            vector<string> postfix = infixToPostfix(expr);
            string result = evaluatePostfix(postfix);
            addQuaternion("return", result, "_", "_");
        }
        i++; // 跳过分号
    }
}
void parseIfStatement(size_t& i, int& labelCount) {
    i++;
    if (Token[i].TokenA == "(") {
        i++;
        vector<token> expr;
        while (Token[i].TokenA != ")") {
            expr.push_back(Token[i]);
            i++;
        }
        vector<string> postfix = infixToPostfix(expr);
        stack<string> condStack;
        string falseLabel = "L" + to_string(labelCount++);
        string endLabel = "L" + to_string(labelCount++);
        string lastTempVar;
        
        for (const auto& token : postfix) {
            if (OP.find(token) == OP.end()) {
                condStack.push(token);
            } else if (token == "&&" || token == "||") {
                string op2 = condStack.top(); condStack.pop();
                string op1 = condStack.top(); condStack.pop();
                string tempVar = "t" + to_string(labelCount++);

                addQuaternion(token, op1, op2, tempVar);
                condStack.push(tempVar);

                if (token == "&&") {
                    addQuaternion("JUMP_FALSE", op1, "_", falseLabel);
                    addQuaternion("JUMP_FALSE", tempVar, "_", falseLabel);
                } else if (token == "||") {
                    addQuaternion("JUMP_TRUE", op1, "_", falseLabel);
                    addQuaternion("JUMP_TRUE", tempVar, "_", falseLabel);
                }
                lastTempVar = tempVar;
            } else {
                string op2 = condStack.top(); condStack.pop();
                string op1 = condStack.top(); condStack.pop();
                string tempVar = "t" + to_string(labelCount++);
                addQuaternion(token, op1, op2, tempVar);
                condStack.push(tempVar);
                lastTempVar = tempVar;
            }
        }

        string result = lastTempVar;
        addQuaternion("JUMP_FALSE", result, "_", falseLabel);
        i++; // 跳过")"
        parseBlock(i, labelCount);
        addQuaternion("JUMP", "_", "_", endLabel);
        addQuaternion("LABEL", "_", "_", falseLabel);

        // 检查是否有else if或else
        while (Token[i].TokenA == "else") {
            i++;
            if (Token[i].TokenA == "if") {
                parseElseIfStatement(i, labelCount, endLabel);
            } else {
                parseBlock(i, labelCount);
                addQuaternion("JUMP", "_", "_", endLabel);
                break;
            }
        }
        addQuaternion("LABEL", "_", "_", endLabel);
    }
}

void parseElseIfStatement(size_t& i, int& labelCount, string& endLabel) {
    i++;
    if (Token[i].TokenA == "(") {
        i++;
        vector<token> expr;
        while (Token[i].TokenA != ")") {
            expr.push_back(Token[i]);
            i++;
        }
        vector<string> postfix = infixToPostfix(expr);
        string result = evaluatePostfix(postfix);
        string tempVar = "t" + to_string(labelCount++);
        addQuaternion(postfix.back(), postfix[postfix.size() - 3], postfix[postfix.size() - 2], tempVar);
        string falseLabel = "L" + to_string(labelCount++);
        addQuaternion("JUMP_FALSE", tempVar, "_", falseLabel);
        i++; // 跳过")"
        parseBlock(i, labelCount);
        addQuaternion("JUMP", "_", "_", endLabel);
        addQuaternion("LABEL", "_", "_", falseLabel);
    }
}
void parseExpression(size_t& i, int& labelCount) {
    string varName = Token[i].TokenA;
    i++;
    if (Token[i].TokenA == ".") {
        i++;
        string memberName = Token[i].TokenA;
        i++;
        if (Token[i].TokenA == "=") {
            i++;
            vector<token> expr;
            while (Token[i].TokenA != ";") {
                expr.push_back(Token[i]);
                i++;
            }
            vector<string> postfix = infixToPostfix(expr);
            string result = evaluatePostfix(postfix);
            addQuaternion("struct_assign", varName + "." + memberName, result, "_");
            i++; // 跳过分号
        } else {
            addQuaternion("struct_access", varName + "." + memberName, "_", "t" + to_string(labelCount++));
        }
    } else if (Token[i].TokenA == "=" || Token[i].TokenA == "+=" || Token[i].TokenA == "-=" || Token[i].TokenA == "*=" || Token[i].TokenA == "/=") {
        string op = Token[i].TokenA;
        i++;
        vector<token> expr;
        while (Token[i].TokenA != ";") {
            expr.push_back(Token[i]);
            i++;
        }
        vector<string> postfix = infixToPostfix(expr);
        string result = evaluatePostfix(postfix);
        if (op == "=") {
            addQuaternion("=", result, "_", varName);
        } else {
            string basicOp = op.substr(0, 1);
            addQuaternion(basicOp, varName, result, varName);
        }
        i++; // 跳过分号
    } else if (Token[i].TokenA == "++") { // 处理自增操作符
        addQuaternion("+", varName, "1", varName);
        i++; // 跳过++
        if (Token[i].TokenA == ";") {
            i++; // 跳过分号
        }
    } else if (Token[i].TokenA == "--") { // 处理自减操作符
        addQuaternion("-", varName, "1", varName);
        i++; // 跳过--
        if (Token[i].TokenA == ";") {
            i++; // 跳过分号
        }
    } else if (Token[i].TokenA == "[") { // 数组访问或赋值
        i++; // 跳过"["
        string index = Token[i].TokenA;
        i++; // 跳过索引
        if (Token[i].TokenA == "]") {
            i++; // 跳过"]"
            if (Token[i].TokenA == "=") {
                i++; // 跳过"="
                string value = Token[i].TokenA;
                addQuaternion("ARRAY_ASSIGN", varName, index, value);
                i++; // 跳过值
                i++; // 跳过";"
            } else {
                addQuaternion("ARRAY_ACCESS", varName, index, "t" + to_string(labelCount++));
                i++; // 跳过分号
            }
        }
    } else if (Token[i].TokenA == "(") {
        i++; // 跳过"("
        vector<string> args;
        while (Token[i].TokenA != ")") {
            if (Token[i].TokenB == 0) {
                args.push_back(Token[i].TokenA);
                i++;
                if (Token[i].TokenA == ",") i++; // 跳过逗号
            }
        }
        vector<string> paramNames = {"x", "y"}; // 假设参数名为x, y
        for (size_t j = 0; j < args.size(); j++) {
            addQuaternion("arg", args[j], "_", paramNames[j]);
        }
        addQuaternion("call", varName, to_string(args.size()), "_");
        i++; // 跳过")"
        i++; // 跳过";"
    }
}
void parseExpression_for(size_t& i, int& labelCount) {
    string varName = Token[i].TokenA;
    i++;
if (Token[i].TokenA == "=" || Token[i].TokenA == "+=" || Token[i].TokenA == "-=" || Token[i].TokenA == "*=" || Token[i].TokenA == "/=") {
                string op = Token[i].TokenA;
                i++;
                vector<token> expr;
                while (Token[i].TokenA != ")") {
                    expr.push_back(Token[i]);
                    i++;
                }
                vector<string> postfix = infixToPostfix(expr);
                string result = evaluatePostfix(postfix);
                if (op == "=") {
                    addQuaternion("=", result, "_", varName);
                } else {
                    string basicOp = op.substr(0, 1);
                    addQuaternion(basicOp, varName, result, varName);
                }
                i++; // 跳过")"
            

}
}

void parseBlock(size_t& i, int& labelCount) {
    i++; // 跳过"{"
    while (Token[i].TokenA != "}") {
        if (Token[i].TokenA == "int") {
            parseVariableDeclaration(i, labelCount);
        } else if (Token[i].TokenA == "if") {
            parseIfStatement(i, labelCount);
        } else if (Token[i].TokenA == "while") {
            parseWhileStatement(i, labelCount);
        } else if (Token[i].TokenA == "for") {
            parseForStatement(i, labelCount);
        } else if (Token[i].TokenA == "return") {
            parseFunctionReturnStatement(i, labelCount);
        } else {
            parseExpression(i, labelCount);
        }
    }
    i++; // 跳过"}"
}

void parseVariableDeclaration(size_t& i, int& labelCount) {
    string type = Token[i].TokenA;
    i++;
    if (Token[i + 1].TokenA == "[") { // Check for array definition
        string varName = Token[i].TokenA;
        i += 2; // Skip array name and "["
        string arraySize = Token[i].TokenA;
        addQuaternion("ARRAY", arraySize, type, varName);
        i += 2; // Skip array size and "]"
        i++; // Skip semicolon
    } else if (Token[i + 1].TokenA == "(") { // Check for function definition
        string funcName = Token[i].TokenA;
        addQuaternion("function_begin", type, "_", funcName);
        i += 2; // Skip function name and "("
        vector<string> paramNames;
        while (Token[i].TokenA != ")") {
            if (Token[i].TokenA == "int" || Token[i].TokenA == "char") {
                i++; // Skip parameter type
                string paramName = Token[i].TokenA;
                paramNames.push_back(paramName); // Record parameter name
                addQuaternion("param", "_", "_", paramName);
                i++; // Skip parameter name
                if (Token[i].TokenA == ",") i++; // Skip comma
            }
        }
        i++; // Skip ")"
        if (Token[i].TokenA == "{") {
            i++; // Skip "{"
            while (Token[i].TokenA != "}") {
                if (Token[i].TokenA == "int" || Token[i].TokenA == "char") {
                    parseVariableDeclaration(i, labelCount);
                } else if (Token[i].TokenA == "if") {
                    parseIfStatement(i, labelCount);
                } else if (Token[i].TokenA == "while") {
                    parseWhileStatement(i, labelCount);
                } else if (Token[i].TokenA == "for") {
                    parseForStatement(i, labelCount);
                } else if (Token[i].TokenA == "return") {
                    parseFunctionReturnStatement(i, labelCount);
                } else {
                    parseExpression(i, labelCount);
                }
            }
            addQuaternion("function_end", "_", "_", funcName);
            i++; // Skip "}"
        }
    } else {
        // Variable definition and expression handling
        while (i < Token.size() && Token[i].TokenA != ";") {
            if (Token[i].TokenB == 0) {
                string varName = Token[i].TokenA;
                addQuaternion(type, varName, "_", "_");
                i++;
                if (Token[i].TokenA == "=" || Token[i].TokenA == "+=" || Token[i].TokenA == "-=" || Token[i].TokenA == "*=" || Token[i].TokenA == "/=") {
                    string op = Token[i].TokenA;
                    i++;
                    vector<token> expr;
                    while (Token[i].TokenA != "," && Token[i].TokenA != ";") {
                        expr.push_back(Token[i]);
                        i++;
                    }
                    vector<string> postfix = infixToPostfix(expr);
                    string result = evaluatePostfix(postfix);
                    if (op == "=") {
                        addQuaternion("=", result, "_", varName);
                    } else {
                        string basicOp = op.substr(0, 1);
                        addQuaternion(basicOp, varName, result, varName);
                    }
                }
                if (Token[i].TokenA == ",") {
                    i++;
                }
            }
        }
        i++; // Skip semicolon
    }
}
void parseWhileStatement(size_t& i, int& labelCount) {
    i++;
    if (Token[i].TokenA == "(") {
        i++;
        vector<token> expr;
        while (Token[i].TokenA != ")") {
            expr.push_back(Token[i]);
            i++;
        }
        string startLabel = "L" + to_string(labelCount++);
        addQuaternion("LABEL", "_", "_", startLabel);
        vector<string> postfix = infixToPostfix(expr);
        string result = evaluatePostfix(postfix);
        string tempVar = "t" + to_string(labelCount++);
        if (postfix.back() == "==" || postfix.back() == "!=") {
            addQuaternion(postfix.back(), postfix[postfix.size() - 3], postfix[postfix.size() - 2], tempVar);
        } else {
            addQuaternion(postfix.back(), postfix[postfix.size() - 3], postfix[postfix.size() - 2], tempVar);
        }
        string falseLabel = "L" + to_string(labelCount++);
        addQuaternion("JUMP_FALSE", tempVar, "_", falseLabel);
        i++; // 跳过")"
        parseBlock(i, labelCount);
        addQuaternion("JUMP", "_","_", startLabel);
        addQuaternion("LABEL", "_", "_", falseLabel);
    }
}
void parseForStatement(size_t& i, int& labelCount) {
    i++;
    if (Token[i].TokenA == "(") {
        i++;
        if (Token[i].TokenA == "int") {
            parseVariableDeclaration(i, labelCount);
        } else {
            parseExpression(i, labelCount);
        }

        string labelStart = "L" + to_string(labelCount++);
        string labelEnd = "L" + to_string(labelCount++);
        addQuaternion("LABEL", "_", "_", labelStart);

        vector<token> condExpr;
        while (Token[i].TokenA != ";") {
            condExpr.push_back(Token[i]);
            i++;
        }
        vector<string> condPostfix = infixToPostfix(condExpr);
        string condResult = evaluatePostfix(condPostfix);
        string tempVar = "t" + to_string(labelCount++);
        addQuaternion(condPostfix.back(), condPostfix[condPostfix.size() - 3], condPostfix[condPostfix.size() - 2], tempVar);
        addQuaternion("JUMP_FALSE", tempVar, "_", labelEnd);
        i++; // 跳过";"

        size_t incStart = i;
        vector<token> incExpr;
        while (Token[i].TokenA != ")") {
            incExpr.push_back(Token[i]);
            i++;
        }
        i++; // 跳过")"

        parseBlock(i, labelCount);
        int tmp = i;

        incExpr.clear();
        i = incStart;
        parseExpression_for(i, labelCount);

        addQuaternion("JUMP", "_", "_", labelStart);
        addQuaternion("LABEL", "_", "_", labelEnd);
        i = tmp;
    }
}
void parseMain(size_t& i, int& labelCount) {
    addQuaternion("main_start",  "main", "_","_");
    i++; // 跳过"main"
    i++; // 跳过"("
    i++; // 跳过")"
    i++;
    //cout<<Token[i].TokenA <<endl;
    if (Token[i].TokenA == "{") {
        parseBlock(i, labelCount);
    }
    addQuaternion("main_end", "main", "_", "_");
}
void parse(string code) {
    // Function with nested statements
    addToken("int", K["int"]);
    addToken("main", 0);
    addToken("(", P["("]);
    addToken(")", P[")"]);
    addToken("{", P["{"]);
    addToken("int", K["int"]);
    addToken("a", 0);
    addToken("=", P["="]);
    addToken("5", 0);
    addToken(";", P[";"]);
    addToken("int", K["int"]);
    addToken("b", 0);
    addToken("=", P["="]);
    addToken("10", 0);
    addToken(";", P[";"]);
    addToken("if", K["if"]);
    addToken("(", P["("]);
    addToken("a", 0);
    addToken("&&", P["&&"]);
    addToken("b", 0);
    addToken("&&", P["&&"]);
    addToken("c", 0);
    addToken(")", P[")"]);
    addToken("{", P["{"]);
    addToken("b", 0);
    addToken("=", P["="]);
    addToken("b", 0);
    addToken("+", P["+"]);
    addToken("a", 0);
    addToken(";", P[";"]);
    addToken("}", P["}"]);
    addToken("}", P["}"]);
}


void generateQuaternions() {
    size_t i = 0;
    int labelCount = 1;
    while (i < Token.size()) {
        if (Token[i].TokenA == "int" && Token[i + 1].TokenA == "main") {
            parseMain(i, labelCount);
        } else if (Token[i].TokenA == "struct") {
            i++;
            parseStructDefinition(i, labelCount);
        } else if (Token[i].TokenA == "int" || Token[i].TokenA == "char") {
            parseVariableDeclaration(i, labelCount);
        } else if (Token[i].TokenA == "if") {
            parseIfStatement(i, labelCount);
        } else if (Token[i].TokenA == "while") {
            parseWhileStatement(i, labelCount);
        } else if (Token[i].TokenA == "for") {
            parseForStatement(i, labelCount);
        } else {
            parseExpression(i, labelCount);
        }
    }
}

void printQuaternions() {
    for (const auto& q : Quaternion) {
        cout << "{" << "\"" << q.op << "\"" << ", " << "\"" << q.opt1 << "\"" << ", " << "\"" << q.opt2 << "\"" << ", " << "\"" << q.result << "\"" << "}," << endl;
    }
}

int main() {
    iniK();
    iniP();
    iniOP();

    string code = "int a = 5, b = 10;    b -= a + 2;    int arr[20]; arr[5] = b;";
    parse(code);
    generateQuaternions();
    printQuaternions();
    system("pause");
 return 0;
}
